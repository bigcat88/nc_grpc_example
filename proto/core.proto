syntax = "proto3";

package OCA.NC_GRPC_Example.Proto;

/*
  All communications messages send by client, server only replies on them.

  Client must set TaskStatus and send TaskExit messages before exit.
  Shutdown: server closes socket.
  Remark: Both client and server part, must stop work after communication channel become broken.
*/


/* docs.nextcloud.com/server/latest/admin_manual/configuration_server/logging_configuration.html#log-level */
enum logLvl {
  DEBUG = 0;
  INFO = 1;
  WARN = 2;
  ERROR = 3;
  FATAL = 4;
}

enum taskStatus {
  ST_SUCCESS = 0;
  ST_INITIALIZING = 1;                  // initialization is in progress
  ST_INSTALLING = 2;                    // install is in progress
  ST_INSTALL_ERROR = 3;                 // install return error
  ST_INIT_ERROR = 4;                    // error during initialization target app
  ST_IN_PROGRESS = 5;                   // target app is running
  ST_EXCEPTION = 6;                     // Unexpected exception occurred
  ST_UNKNOWN = 7;                       // Default task state at start
}

enum taskType {
  T_DEFAULT = 0;                           // install silently if needed and run.
  T_CHECK = 1;                             // check app and returns it's info.
  T_INSTALL = 2;                           // install app and returns result of check.
  T_RUN = 3;                               // only run, without any checks.
}

message Empty { }

message dbConfig {
  string dbType = 1;                      // DB Type configuration
  string dbUser = 2;                      // DB User configuration
  string dbPass = 3;                      // DB Password configuration
  string dbHost = 4;                      // DB Host configuration
  string dbName = 5;                      // DB Name configuration
  string dbPrefix = 6;                    // DB tables prefix configuration
  string iniDbSocket = 7;                 // DB Socket configuration from ini (mysql)
  string iniDbHost = 8;                   // DB Host configuration from ini (mysql)
  string iniDbPort = 9;                   // DB Port configuration from ini (mysql)
  string dbDriverSslKey = 10;             // DB MYSQL_ATTR_SSL_KEY configuration
  string dbDriverSslCert = 11;            // DB MYSQL_ATTR_SSL_CERT configuration
  string dbDriverSslCa = 12;              // DB MYSQL_ATTR_SSL_CA configuration
  string dbDriverSslVerifyCrt = 13;       // DB MYSQL_ATTR_SSL_VERIFY_SERVER_CERT configuration
}

message TaskInitReply {
  taskType cmdType = 1;
  string appName = 2;                     // Name of the app. Installed packages will be stored by this name for app.
  string modPath = 3;                     // Path to module root, to be executed.
  string funcName = 4;                    // Which function to execute.
  repeated string args = 5;               // Optional arguments to pass to target python app's module.
  message cfgOptions {
    logLvl log_lvl = 1;                   // 0-4 , level logs from NC documentation.
    string dataFolder = 2;                // Path to NC data folder.
    string userId = 3;                    // Current NC user UID
    bool useFileDirect = 4;               // Use extra direct FS module for python, when possible.
    bool useDBDirect = 5;                 // Use extra direct DB module for python, if possible.
    int32 maxChunkSize = 6;               // Maximum chunk size of RPC stream data.
    int32 maxCreateFileContent = 7;       // Maximum chunk size for FS Create operations
  }
  cfgOptions config = 6;
  dbConfig dbCfg = 7;                     // Database configuration
  string handler = 8;                     // PHP Callback handler for TaskExit
}

message TaskSetStatusRequest {
  taskStatus st_code = 1;                 // Status code of a task.
  string error = 2;                       // Optional error, if any. Valid only when Status is non success/in_progress.
}

message CheckDataRequest {                // Framework returns this after TaskInitReply when cmdType != T_RUN.
  message missing_pckg {
    string name = 1;
    string version = 2;                   // Format JSON: [["<=", "0.1.5"], [">=", "0.1.3"]]
  }
  repeated missing_pckg not_installed = 1;
  message installed_pckg {
    string name = 1;
    string version = 2;                   // Format JSON: "8.4.0"
    string location = 3;                  // Path where it is installed.
    string summary = 4;                   // Description, what this package do.
    string requires = 5;                  // Depends on. In JSON format, array of string.
  }
  repeated installed_pckg installed = 2;
}

message TaskExitRequest {                 // No reply. Server must close pipe/socket after this message.
  string result = 1;                      // Result of task, if any.
}

message TaskLogRequest {                  // No reply.
  logLvl log_lvl = 1;
  string module = 2;                      // What module logs belongs to.
  repeated string content = 3;            // One or more strings to put to log.
}
